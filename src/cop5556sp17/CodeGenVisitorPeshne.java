package cop5556sp17;

import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import static org.junit.Assert.assertEquals;

import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;

public class CodeGenVisitorPeshne {
  // http://stackoverflow.com/a/1119559/1291435
  private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();

  static final boolean doPrint = true;
  static void show(Object s) {
    if (doPrint) {
      System.out.println(s);
    }
  }

  boolean devel = false;
  boolean grade = true;

  private String genProg(String paramDec, String block) {
    //http://stackoverflow.com/a/21873525/1291435
    String progName = Thread.currentThread().getStackTrace()[2].getMethodName();
    return (progName + " " + paramDec + block);
  }

  private String genBlock(String... statements) {
    StringBuilder result = new StringBuilder("{");
    for (String statement : statements) {
      result.append(statement + "\n");
    }
    result.append("}");
    return result.toString();
  }

  private void test(String input, String[] args) throws Exception {
    test(input, args, null);
  }

  private void test(String input, String[] args, String expOut) throws Exception {
    //scan, parse, and type check the program
    Scanner scanner = new Scanner(input);
    scanner.scan();
    Parser parser = new Parser(scanner);
    ASTNode program = parser.parse();
    TypeCheckVisitor v = new TypeCheckVisitor();
    program.visit(v, null);
    show(program);

    //generate code
    CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    byte[] bytecode = (byte[]) program.visit(cv, null);

    //output the generated bytecode
    CodeGenUtils.dumpBytecode(bytecode);

    //write byte code to file
    String name = ((Program) program).getName();
    String classFileName = "bin/" + name + ".class";
    OutputStream output = new FileOutputStream(classFileName);
    output.write(bytecode);
    output.close();
    System.out.println("wrote classfile to " + classFileName);

    // directly execute bytecode
    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    PrintStream oldStream = null;
    if (expOut != null) {
      oldStream = System.out;
      System.setOut(new PrintStream(outContent));
    }
    instance.run();
    if (expOut != null) {
      assertEquals(expOut, outContent.toString());
      System.setOut(oldStream);
    }
  }

  @Test
  public void emptyProg() throws Exception {
    String input = genProg("", "{}");
    String[] args = new String[0];
    test(input, args);
  }

  @Test
  public void paramDecs() throws Exception {
    String input = genProg("integer x, integer y,  boolean b",
                           genBlock(""));
    String[] args = {"1", "2",  "true"};
      test(input, args);
  }

  @Test
  public void paramAdd() throws Exception {
    String input = genProg("integer x, integer y",
                           genBlock("x <- x + y;"));
    String[] args = {"1", "2"};
    test(input, args, "3");
  }

  @Test
  public void paramSub() throws Exception {
    String input = genProg("integer x, integer y",
                           genBlock("x <- x - y;"));
    String[] args = {"1", "2"};
    test(input, args, "-1");
  }

  //@Test
  public void paramMod() throws Exception {
    String input = genProg("integer x, integer y",
                           genBlock("integer result",
                                    "result <- x % y;"));
    String[] args = {"15", "7"};
    test(input, args, "1");
  }

  //@Test
  public void paramAnd() throws Exception {
    String input = genProg("integer x, integer y",
                           genBlock("integer result",
                                    "result <- x & y;"));
    String[] args = {"2", "3"};
    test(input, args, "2");
  }

  //@Test
  public void paramOr() throws Exception {
    String input = genProg("integer x, integer y",
                           genBlock("integer result",
                                    "result <- x | y;"));
    String[] args = {"2", "3"};
    test(input, args, "3");
  }

  @Test
  public void paramDiv() throws Exception {
    String input = genProg("integer x, integer y",
                           genBlock("x <- x / y;"));
    String[] args = {"12", "2"};
    test(input, args, "6");
  }

  @Test
  public void paramMul() throws Exception {
    String input = genProg("integer x, integer y",
                           genBlock("x <- x * y;"));
    String[] args = {"112", "2"};
    test(input, args, "224");
  }

  @Test
  public void decIntLitSum() throws Exception {
    String input = genProg("integer x",
                           genBlock("integer x integer y",
                                    "x <- 12;",
                                    "x <- x + 1;",
                                    "x <- x * 2;",
                                    "y <- x - 654;",
                                    "x <- y / 4;"));
    String[] args = {"2"};
    test(input, args, "121326-628-157"); //12 13 26 -628 -157
  }

  @Test
  public void basicAssign() throws Exception {
    String input = genProg("integer x",
                           genBlock("integer y",
                                    "y <- 12;",
                                    "x <- y / 4;"));
    String[] args = {"2"};
    test(input, args, "123"); // 12(12 / 4)
  }

  @Test
  public void testBasicBranching() throws Exception {
    String input = genProg("boolean double, integer x",
                           genBlock("integer result",
                                    "if (double) ",
                                    genBlock("result <- x * 2;"),
                                    "result <- x;"));
    String[] args = {"true", "23"};
    String expOut = "4623";
    test(input, args,expOut);

    String[] args2 = {"false", "23"};
    String expOut2 = "23";
    // out1 + out2 because we are not clearing captured out
    test(input, args2, expOut + expOut2);
  }

  @Test
  public void testBranching1() throws Exception {
    String input = genProg("integer x, integer y",
                           genBlock("integer result",
                                    "if (x > y) ",
                                    genBlock("result <- x * 2;"),
                                    "result <- x;"));
    String[] args = {"12", "23"};
    String expOut = "12";
    test(input, args,expOut);

    String[] args2 = {"24", "23"};
    String expOut2 = "4824";
    // out1 + out2 because we are not clearing captured out
    test(input, args2, expOut + expOut2);
  }
  @Test
  public void testBranching2() throws Exception {
    String input = genProg("integer x, integer y",
                           genBlock("integer result",
                                    "if (x >= y) ",
                                    genBlock("result <- x * 2;"),
                                    "result <- x;"));
    String[] args = {"-1", "23"};
    String expOut = "-1";
    test(input, args,expOut);

    String[] args2 = {"23", "23"};
    String expOut2 = "4623";
    // out1 + out2 because we are not clearing captured out
    test(input, args2, expOut + expOut2);
  }

  @Test
  public void testBranching3() throws Exception {
    String input = genProg("integer x, integer y",
                           genBlock("integer result",
                                    "if (x < y) ",
                                    genBlock("result <- x * 2;"),
                                    "result <- x;"));
    String[] args = {"45", "23"};
    String expOut = "45";
    test(input, args,expOut);

    String[] args2 = {"21", "23"};
    String expOut2 = "4221";
    // out1 + out2 because we are not clearing captured out
    test(input, args2, expOut + expOut2);
  }
  @Test
  public void testBranching4() throws Exception {
    String input = genProg("integer x, integer y",
                           genBlock("integer result",
                                    "if (x <= y) ",
                                    genBlock("result <- x * 2;"),
                                    "result <- x;"));
    String[] args = {"100", "23"};
    String expOut = "100";
    test(input, args,expOut);

    String[] args2 = {"23", "23"};
    String expOut2 = "4623";
    // out1 + out2 because we are not clearing captured out
    test(input, args2, expOut + expOut2);
  }
  @Test
  public void testBranching5() throws Exception {
    String input = genProg("integer x, integer y",
                           genBlock("integer result",
                                    "if (x == y) ",
                                    genBlock("result <- x * 2;"),
                                    "result <- x;"));
    String[] args = {"100", "23"};
    String expOut = "100";
    test(input, args,expOut);

    String[] args2 = {"23", "23"};
    String expOut2 = "4623";
    // out1 + out2 because we are not clearing captured out
    test(input, args2, expOut + expOut2);
  }
  @Test
  public void testBranching6() throws Exception {
    String input = genProg("integer x, integer y",
                           genBlock("integer result",
                                    "if (x != y) ",
                                    genBlock("result <- x * 2;"),
                                    "result <- x;"));
    String[] args = {"23", "23"};
    String expOut = "23";
    test(input, args,expOut);

    String[] args2 = {"100", "23"};
    String expOut2 = "200100";
    // out1 + out2 because we are not clearing captured out
    test(input, args2, expOut + expOut2);
  }
  @Test
  public void testBoolBranching1() throws Exception {
    String input = genProg("boolean x, boolean y",
                           genBlock("integer result",
                                    "if (x < y) ",
                                    genBlock("result <- 2;"),
                                    "result <- 3;"));
    String[] args = {"true", "true"};
    String expOut = "3";
    test(input, args,expOut);

    String[] args2 = {"false", "true"};
    String expOut2 = "23";
    // out1 + out2 because we are not clearing captured out
    test(input, args2, expOut + expOut2);
  }
  @Test
  public void testBoolBranching2() throws Exception {
    String input = genProg("boolean x, boolean y",
                           genBlock("integer result",
                                    "if (x > y) ",
                                    genBlock("result <- 2;"),
                                    "result <- 3;"));
    String[] args = {"true", "true"};
    String expOut = "3";
    test(input, args,expOut);

    String[] args2 = {"true", "false"};
    String expOut2 = "23";
    // out1 + out2 because we are not clearing captured out
    test(input, args2, expOut + expOut2);
  }
  @Test
  public void testBoolBranching3() throws Exception {
    String input = genProg("boolean x, boolean y",
                           genBlock("integer result",
                                    "if (x <= y) ",
                                    genBlock("result <- 2;"),
                                    "result <- 3;"));
    String[] args = {"true", "true"};
    String expOut = "23";
    test(input, args,expOut);

    String[] args2 = {"true", "false"};
    String expOut2 = "3";
    // out1 + out2 because we are not clearing captured out
    test(input, args2, expOut + expOut2);
  }
  @Test
  public void testBoolBranching4() throws Exception {
    String input = genProg("boolean x, boolean y",
                           genBlock("integer result",
                                    "if (x >= y) ",
                                    genBlock("result <- 2;"),
                                    "result <- 3;"));
    String[] args = {"true", "true"};
    String expOut = "23";
    test(input, args,expOut);

    String[] args2 = {"true", "false"};
    String expOut2 = "23";
    // out1 + out2 because we are not clearing captured out
    test(input, args2, expOut + expOut2);
  }
  @Test
  public void testBoolBranching5() throws Exception {
    String input = genProg("boolean x, boolean y",
                           genBlock("integer result",
                                    "if (x == y) ",
                                    genBlock("result <- 2;"),
                                    "result <- 3;"));
    String[] args = {"true", "true"};
    String expOut = "23";
    test(input, args,expOut);

    String[] args2 = {"true", "false"};
    String expOut2 = "3";
    // out1 + out2 because we are not clearing captured out
    test(input, args2, expOut + expOut2);

    String[] args3 = {"false", "false"};
    String expOut3 = "23";
    // out1 + out2 because we are not clearing captured out
    test(input, args3, expOut + expOut2 + expOut3);
  }
  @Test
  public void testBoolBranching6() throws Exception {
    String input = genProg("boolean x, boolean y",
                           genBlock("integer result",
                                    "if (x != y) ",
                                    genBlock("result <- 2;"),
                                    "result <- 3;"));
    String[] args = {"true", "true"};
    String expOut = "3";
    test(input, args,expOut);

    String[] args2 = {"true", "false"};
    String expOut2 = "23";
    // out1 + out2 because we are not clearing captured out
    test(input, args2, expOut + expOut2);

    String[] args3 = {"false", "false"};
    String expOut3 = "3";
    // out1 + out2 because we are not clearing captured out
    test(input, args3, expOut + expOut2 + expOut3);
  }
  @Test
  public void testBasicLooping() throws Exception {
    String input = genProg("integer counter, integer x",
                           genBlock("integer step",
                                    "step <- x;",
                                    "while (0 < counter) ",
                                    genBlock("counter <- counter - step;")));
    String[] args = {"10", "2"};
    String expOut = "286420";
    test(input, args,expOut);
  }
  @Test
  public void testStructuredLoop() throws Exception {
    String input = genProg("",
                           genBlock("integer counter",
                                    "boolean cond",
                                    "counter <- 0;",
                                    "cond <- true;",
                                    "while (cond) ",
                                    genBlock("integer maxCount",
                                             "maxCount <- 9;",
                                             "counter <- counter + 1;",
                                             "if (counter >= maxCount)",
                                             genBlock("cond <- false;"))));
    String[] args = {};
    StringBuilder expOut = new StringBuilder();
    expOut.append("0true");
    for (int i = 0; i < 9; i++) {
      expOut.append("9" + (i + 1));
    }
    expOut.append("false");
    test(input, args, expOut.toString());
  }

  @Test
  public void testSlotNum() throws Exception {
    String input = genProg("integer x",
                           genBlock("if (x > 12)",
                                    genBlock("x <- 21;"),
                                    "if (x > 6)",
                                    genBlock("x <- 18;")));
    String[] args = {"13"};
    String expOut = "2118";
    test(input, args,expOut);

    String[] args2 = {"7"};
    String expOut2 = "18";
    // out1 + out2 because we are not clearing captured out
    test(input, args2, expOut + expOut2);
  }
}

